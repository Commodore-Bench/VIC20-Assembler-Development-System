
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass -L loloader.lst -o loloader.prg loloader.asm
; Mon Dec 04 12:35:38 2017

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: loloader.asm

=1					BSTUB = 1
>1201	0d 12				 .WORD BASIC    ;LINE LINK POINTER
>1203	0a 00				 .BYTE $0A,$00  ;LINE NUMBER (10)
>1205	9e				 .BYTE 158      ;SYS COMMAND TOKEN
>1206	28 34 36 32 33 29		 .TEXT '(4623)' ;CALL TO $080F
>120c	00				 .BYTE $00      ;END OF LINE
.120d					BASIC
>120d	00 00				 .BYTE $00,$00  ;END OF BASIC
=$4c					TITLE1=$4C ;'L'
=$4f					TITLE2=$4F ;'O'
=$ff90					SETMSG=$FF90
.120f	a9 c0		lda #$c0	 LDA #$C0     ;ALLOW ALL MSG
.1211	20 90 ff	jsr $ff90	 JSR SETMSG

;******  Processing file: loader.asm

=$90					STATUS=$90    ;STATUS BYTE
=$fb					ZEROPG=$FB    ;ZERO PAGE POINTER
=$fd					ZEROUR=$FD    ;ZERO PAGE POINTER
=$ffe1					STOP  =$FFE1  ;CHECK FOR STOP
=$ffba					SETLFS=$FFBA  ;SET LOGICAL FILE
=$ffbd					SETNAM=$FFBD  ;SET FILENAME
=$ffc0					OPEN  =$FFC0  ;OPEN FILE
=$ffc3					CLOSE =$FFC3  ;CLOSE LOGICAL FILE
=$ffc6					CHKIN =$FFC6  ;OPEN INPUT CHANNEL
=$ffcc					CLRCHN=$FFCC  ;RESET I/O CHANNELS
=$ffcf					CHRIN =$FFCF  ;GET KEYBOARD INPUT
=$ffd2					CHROUT=$FFD2  ;OUTPUT CHARACTER
=$ffd5					LOAD  =$FFD5
=$ffd8					SAVE  =$FFD8
=$ffe4					GETIN =$FFE4
=$ffb7					READST=$FFB7
.1214	20 cc ff	jsr $ffcc	LOADER JSR CLRCHN  ;RSET I/O
.1217	a9 00		lda #$00	 LDA #$00        ;ZERO BYTE
.1219	8d 7b 14	sta $147b	 STA RECORD      ;RECORD COUNT
.121c	8d 7c 14	sta $147c	 STA RECORD+1    ;
.121f	8d 78 14	sta $1478	 STA OFFSET      ;LOAD OFFSET
.1222	8d 79 14	sta $1479	 STA OFFSET+1    ;
.1225	85 90		sta $90		 STA STATUS      ;I/O STATUS
.1227	a2 4b		ldx #$4b	 LDX #MSG7-MSG1  ;OFFSET FOR TITLE
.1229	20 d5 13	jsr $13d5	 JSR PRINT       ;PRINT TITLE
.122c	90 e6		bcc $1214	 BCC LOADER      ;IF ERROR RESET
.122e	a9 00		lda #$00	 LDA #$00        ;ERROR CODE
.1230	8d 54 15	sta $1554	 STA ECODE       ;SET ERROR
.1233	8d 53 15	sta $1553	 STA SAFG        ;CLEAR START ADDRESS FLAG
.1236	a2 89		ldx #$89	 LDX #MSG8-MSG1  ;FILE NAME
.1238	20 d5 13	jsr $13d5	 JSR PRINT       ;PRINT IT
.123b	a2 28		ldx #$28	 LDX #$28        ;CHAR COUNT
.123d	8e 7d 14	stx $147d	 STX COUNT       ;STORE IN COUNT
.1240	ce 7d 14	dec $147d	SPACE DEC COUNT  ;DEC COUNT
.1243	f0 cf		beq $1214	 BEQ LOADER      ;IF ZERO RESET
.1245	20 cf ff	jsr $ffcf	 JSR CHRIN       ;GET CHAR
.1248	c9 20		cmp #$20	 CMP #' '        ;IS IT A SPACE
.124a	f0 f4		beq $1240	 BEQ SPACE       ;IF SO LOOP
.124c	c9 0d		cmp #$0d	 CMP #$0D        ;IS FIRST CR?
.124e	d0 08		bne $1258	 BNE NAME        ;IF NOT BRANCH
.1250	a9 45		lda #$45	 LDA #'E'        ;ERROR CODE
.1252	8d 54 15	sta $1554	 STA ECODE       ;SET ERROR
.1255	4c 9a 13	jmp $139a	 JMP QUIT        ;QUIT LOADER
.1258	a2 00		ldx #$00	NAME LDX #$00    ;ZERO BYTE
.125a	8e 91 14	stx $1491	 STX COUNT1      ;CHAR COUNT
.125d	f0 07		beq $1266	 BEQ CRLFD        ;BRANCH ALWAYS
.125f	20 cf ff	jsr $ffcf	GETC  JSR CHRIN  ;GET NEXT CHAR
.1262	c9 20		cmp #$20	 CMP #' '        ;IS IT A SPACE?
.1264	f0 15		beq $127b	 BEQ DNAME       ;NONE ALLOWED
.1266	c9 0d		cmp #$0d	CRLFD CMP #$0D    ;IS IT CR?
.1268	f0 11		beq $127b	 BEQ DNAME       ;END OF NAME
.126a	ae 91 14	ldx $1491	 LDX COUNT1      ;GET CHAR COUNT
.126d	e0 0f		cpx #$0f	 CPX #$0F        ;15 CHARS?
.126f	f0 a3		beq $1214	 BEQ LOADER      ;RESTART LOADER
.1271	9d 7f 14	sta $147f,x	 STA BUF,X       ;STORE CHAR
.1274	e8		inx		 INX             ;INC OFFSET
.1275	8e 91 14	stx $1491	 STX COUNT1      ;CHAR COUNT
.1278	4c 5f 12	jmp $125f	 JMP GETC        ;GET NEXT CHAR
.127b	a9 2c		lda #$2c	DNAME LDA #',' ;ASCII ","
.127d	9d 7f 14	sta $147f,x	 STA BUF,X     ;PUT IN BUFFER
.1280	e8		inx		 INX           ;INC OFFSET
.1281	a9 53		lda #$53	 LDA #'S'      ;FOR SEQ FILE
.1283	9d 7f 14	sta $147f,x	 STA BUF,X     ;PUT IN BUFFER
.1286	e8		inx		 INX           ;INC OFFSET
.1287	8e 91 14	stx $1491	 STX COUNT1    ;SAVE NUMBER CHARS
.128a	a9 0d		lda #$0d	 LDA #$0D      ;ASCII CR
.128c	20 d2 ff	jsr $ffd2	 JSR CHROUT    ;PRINT IT
.128f	a9 07		lda #$07	 LDA #$07    ;FILE #7
.1291	a2 08		ldx #$08	 LDX #$08    ;DEVICE #8
.1293	a0 0f		ldy #$0f	 LDY #$0F    ;SEC ADR #15
.1295	20 ba ff	jsr $ffba	 JSR SETLFS  ;SET FILE PARA
.1298	a2 74		ldx #$74	 LDX #<INIT  ;LOW FILENAME
.129a	a0 14		ldy #$14	 LDY #>INIT  ;HIGH FILENAME
.129c	a9 02		lda #$02	 LDA #$02    ;LENGTH OF NAME
.129e	20 bd ff	jsr $ffbd	 JSR SETNAM  ;SET FILENAME
.12a1	20 c0 ff	jsr $ffc0	 JSR OPEN    ;OPEN FILE
.12a4	a5 90		lda $90		 LDA STATUS  ;GET STATUS
.12a6	f0 04		beq $12ac	 BEQ OK      ;ZERO IF OK
.12a8	c9 40		cmp #$40	 CMP #$40    ;IS IT 64?
.12aa	d0 23		bne $12cf	 BNE ERROR1  ;ERROR
.12ac	a9 07		lda #$07	OK LDA #$07  ;FILE #7
.12ae	20 c3 ff	jsr $ffc3	 JSR CLOSE   ;CLOSE FILE
.12b1	a9 07		lda #$07	 LDA #$07    ;FILE #7
.12b3	a2 08		ldx #$08	 LDX #$08    ;DEVICE #8
.12b5	a0 07		ldy #$07	 LDY #$07    ;SECOND ADDRESS
.12b7	20 ba ff	jsr $ffba	 JSR SETLFS  ;SET FILE
.12ba	a2 7f		ldx #$7f	 LDX #<BUF   ;LOW FILENAME
.12bc	a0 14		ldy #$14	 LDY #>BUF   ;HIGH FILENAME
.12be	ad 91 14	lda $1491	 LDA COUNT1  ;GET LENGTH
.12c1	20 bd ff	jsr $ffbd	 JSR SETNAM  ;SET FILENAME
.12c4	20 c0 ff	jsr $ffc0	 JSR OPEN        ;OPEN FILE
.12c7	a5 90		lda $90		 LDA STATUS      ;CHECK STATUS
.12c9	f0 07		beq $12d2	 BEQ OK3         ;IF ZERO OK
.12cb	c9 40		cmp #$40	 CMP #$40        ;END OF FILE?
.12cd	f0 03		beq $12d2	 BEQ OK3         ;IF SO OK
.12cf	4c 84 13	jmp $1384	ERROR1 JMP ERROR ;FILE ERROR
.12d2	a2 07		ldx #$07	OK3 LDX #$07     ;FILE #7
.12d4	20 c6 ff	jsr $ffc6	 JSR CHKIN       ;INPUT FILE
.12d7	20 e1 ff	jsr $ffe1	CKSTOP JSR STOP  ;CHECK STOP
.12da	d0 03		bne $12df	 BNE OK2         ;IF NOT GO ON.
.12dc	4c 92 13	jmp $1392	 JMP BREAK       ;BREAK ERROR
.12df	20 f6 13	jsr $13f6	OK2  JSR INPUT   ;GET BYTE
.12e2	c9 3b		cmp #$3b	 CMP #';'        ;START OF RECORD
.12e4	d0 f1		bne $12d7	 BNE CKSTOP      ;IF NOT TRY AGAIN
.12e6	a9 00		lda #$00	 LDA #$00        ;ZERO BYTE
.12e8	8d 76 14	sta $1476	 STA USER        ;ZERO CHECK LOW
.12eb	8d 77 14	sta $1477	 STA USER+1      ;ZERO CHECK HIGH
.12ee	8d 7d 14	sta $147d	 STA COUNT       ;ZERO BYTE COUNT
.12f1	20 19 14	jsr $1419	 JSR GETBYT      ;GET BYTE
.12f4	d0 19		bne $130f	 BNE RECGOD      ;<>0 NOT LAST
.12f6	20 19 14	jsr $1419	 JSR GETBYT      ;GET RECORD COUNT
.12f9	cd 7c 14	cmp $147c	 CMP RECORD+1    ;SAME AS REC HIGH
.12fc	f0 03		beq $1301	 BEQ NEXCT       ;IF EQUAL NEXT
.12fe	4c 95 13	jmp $1395	 JMP RECERR      ;BAD REC COUNT
.1301	20 19 14	jsr $1419	NEXCT JSR GETBYT ;GET RECORD COUNT
.1304	cd 7b 14	cmp $147b	 CMP RECORD      ;SAME AS REC LOW
.1307	d0 03		bne $130c	 BNE RECER      ;BAD REC COUNT
.1309	4c 9a 13	jmp $139a	 JMP QUIT        ;ALL LOADED
.130c	4c 95 13	jmp $1395	RECER JMP RECERR ;
.130f	8d 7a 14	sta $147a	RECGOD STA NUMBYT ;STORE NUM BYTES
.1312	ee 7b 14	inc $147b	 INC RECORD       ;INC REC COUNT
.1315	d0 03		bne $131a	 BNE SKPIN1       ;ZERO?
.1317	ee 7c 14	inc $147c	 INC RECORD+1     ;IF SO INC HIGH
.131a	20 0c 14	jsr $140c	SKPIN1 JSR SUMBYT ;SUM BYTES
.131d	20 19 14	jsr $1419	 JSR GETBYT       ;GET HIH ADDRESS
.1320	85 fc		sta $fc		 STA ZEROPG+1     ;STORE IN POINT
.1322	20 0c 14	jsr $140c	 JSR SUMBYT       ;SUM BYTES
.1325	20 19 14	jsr $1419	 JSR GETBYT       ;GET LOW ADDRESS
.1328	85 fb		sta $fb		 STA ZEROPG       ;STORE IN POINT
=$132a					SKPINC =*
.132a	20 0c 14	jsr $140c	 JSR SUMBYT       ;SUM BYTES
.132d	ad 7b 14	lda $147b	 LDA RECORD       ;GET REC COUNT
.1330	c9 01		cmp #$01	 CMP #$01         ;FIRST ONE
.1332	d0 1e		bne $1352	 BNE MORBYT       ;IF NOT GO ON
.1334	a9 0d		lda #$0d	 LDA #$0D         ;ASCII CR
.1336	20 d2 ff	jsr $ffd2	 JSR CHROUT       ;PRINT IT
.1339	20 43 14	jsr $1443	 JSR PRTADD       ;PRINT ADDRESS
.133c	ad 53 15	lda $1553	 LDA SAFG     ;CHECK START ADDRESS FLAG
.133f	d0 11		bne $1352	 BNE MORBYT   ;IF SET SKIP NEXT
.1341	a9 01		lda #$01	 LDA #$01
.1343	8d 53 15	sta $1553	 STA SAFG
.1346	ad 4d 15	lda $154d	 LDA SAV
.1349	8d 4f 15	sta $154f	 STA SA
.134c	ad 4e 15	lda $154e	 LDA SAV+1
.134f	8d 50 15	sta $1550	 STA SA+1
.1352	20 19 14	jsr $1419	MORBYT JSR GETBYT ;GET DATA BYTE
.1355	ac 7d 14	ldy $147d	 LDY COUNT        ;GET BYTE COUNT
.1358	8c 91 14	sty $1491	 STY COUNT1       ;SAVE COUNT
.135b	ee 7d 14	inc $147d	 INC COUNT        ;INC COUNT
.135e	91 fb		sta ($fb),y	 STA (ZEROPG),Y   ;STORE DATA
.1360	d1 fb		cmp ($fb),y	 CMP (ZEROPG),Y   ;CHECK DATA
.1362	d0 28		bne $138c	 BNE NONRAM       ;IF <> ERROR
.1364	20 0c 14	jsr $140c	 JSR SUMBYT       ;SUM BYTES
.1367	ce 7a 14	dec $147a	 DEC NUMBYT       ;DEC BYTE COUNT
.136a	d0 e6		bne $1352	 BNE MORBYT       ;IF <>0 MORE
.136c	20 19 14	jsr $1419	 JSR GETBYT       ;GET HIH CHECK
.136f	cd 77 14	cmp $1477	 CMP USER+1       ;COMPARE, SAME?
.1372	d0 1b		bne $138f	 BNE CHKERR       ;IF NOT ERROR
.1374	20 19 14	jsr $1419	 JSR GETBYT       ;GET LOW CHECK
.1377	cd 76 14	cmp $1476	 CMP USER         ;COMPARE, SAME?
.137a	d0 13		bne $138f	 BNE CHKERR       ;IF NOT ERROR
.137c	a9 2e		lda #$2e	 LDA #'.'         ;ASCII PERIOD
.137e	20 d2 ff	jsr $ffd2	 JSR CHROUT       ;PRINT IT
.1381	4c d7 12	jmp $12d7	 JMP CKSTOP       ;NEXT RECORD
=$1384					ERROR =*
.1384	a9 45		lda #$45	 LDA #'E'
.1386	8d 54 15	sta $1554	 STA ECODE
.1389	a2 40		ldx #$40	 LDX #MSG6-MSG1  ;FILE ERROR
>138b	2c				.BYTE $2C
.138c	a2 24		ldx #$24	NONRAM LDX #MSG4-MSG1 ;NON-RAM LOAD
>138e	2c				.BYTE $2C
.138f	a2 31		ldx #$31	CHKERR LDX #MSG5-MSG1 ;CHECKSUM ERROR
>1391	2c				.BYTE $2C
.1392	a2 11		ldx #$11	BREAK LDX #MSG2-MSG1 ;BREAK ERROR
>1394	2c				.BYTE $2C
.1395	a2 00		ldx #$00	RECERR LDX #$00 ;BAD RECORD COUNT
.1397	20 d5 13	jsr $13d5	 JSR PRINT      ;PRINT MESSAGE
.139a	20 cc ff	jsr $ffcc	QUIT JSR CLRCHN ;RESET I/O
.139d	a9 07		lda #$07	 LDA #$07       ;FILE #7
.139f	20 c3 ff	jsr $ffc3	 JSR CLOSE      ;CLOSE
.13a2	ad 54 15	lda $1554	 LDA ECODE
.13a5	c9 45		cmp #$45	 CMP #'E'
.13a7	d0 01		bne $13aa	 BNE PADR
.13a9	60		rts		 RTS           ;BACK TO BASIC
=$13aa					PADR =*
.13aa	18		clc		 CLC            ;CLEAR CARRY
.13ab	ad 91 14	lda $1491	 LDA COUNT1     ;GET LAST OFFSET
.13ae	65 fb		adc $fb		 ADC ZEROPG     ;ADD TO LAST REC
.13b0	85 fb		sta $fb		 STA ZEROPG     ;LOAD ADDRESS
.13b2	a5 fc		lda $fc		 LDA ZEROPG+1   ;
.13b4	69 00		adc #$00	 ADC #$00       ;
.13b6	85 fc		sta $fc		 STA ZEROPG+1   ;
.13b8	a9 0d		lda #$0d	 LDA #$0D       ;ASCII CR
.13ba	20 d2 ff	jsr $ffd2	 JSR CHROUT     ;PRINT IT
.13bd	20 43 14	jsr $1443	 JSR PRTADD     ;PRINT ADDRESS
.13c0	ad 4d 15	lda $154d	 LDA SAV
.13c3	8d 51 15	sta $1551	 STA EA
.13c6	ad 4e 15	lda $154e	 LDA SAV+1
.13c9	8d 52 15	sta $1552	 STA EA+1
.13cc	a2 18		ldx #$18	 LDX #MSG3-MSG1 ;END OF LOAD
.13ce	20 d5 13	jsr $13d5	 JSR PRINT      ;PRINT IT
.13d1	20 55 15	jsr $1555	 JSR SAVOBJ
.13d4	60		rts		 RTS       ;BACK TO BASIC
.13d5	8e 7d 14	stx $147d	PRINT STX COUNT ;PUT X IN COUNT
.13d8	ae 7d 14	ldx $147d	PLOOP LDX COUNT ;LOAD X FROM COUNT
.13db	bd 92 14	lda $1492,x	 LDA MSG1,X     ;LOAD CHAR
.13de	08		php		 PHP            ;SAVE STATUS FLAG
.13df	29 7f		and #$7f	 AND #$7F       ;MASK BIT 8
.13e1	20 d2 ff	jsr $ffd2	 JSR CHROUT     ;PRINT CHAR
.13e4	ee 7d 14	inc $147d	 INC COUNT      ;INC OFFSET
.13e7	28		plp		 PLP            ;GET STATUS FLAG
.13e8	10 ee		bpl $13d8	 BPL PLOOP      ;IF BIT 8 ZERO
.13ea	60		rts		 RTS            ;RETURN
.13eb	c9 3a		cmp #$3a	BYTASC CMP #$3A ;IS CHAR >9
.13ed	08		php		 PHP            ;PUSH P
.13ee	29 0f		and #$0f	 AND #$0F       ;MASK HIGH BYTE
.13f0	28		plp		 PLP            ;PULL P
.13f1	90 02		bcc $13f5	 BCC EXIT1      ;IF <=9 OK
.13f3	69 08		adc #$08	 ADC #$08       ;ADD OFFSET
.13f5	60		rts		EXIT1 RTS       ;RETURN
.13f6	20 cf ff	jsr $ffcf	INPUT JSR CHRIN ;INPUT CHAR
.13f9	48		pha		 PHA            ;STORE
.13fa	a5 90		lda $90		 LDA STATUS     ;GET STATUS BYTE
.13fc	f0 04		beq $1402	 BEQ JUMP       ;IF ZERO OK
.13fe	c9 40		cmp #$40	 CMP #$40       ;END OF FILE?
.1400	d0 02		bne $1404	 BNE DISKER     ;IF NOT ERROR
.1402	68		pla		JUMP PLA        ;GET CHAR
.1403	60		rts		 RTS            ;RETURN
.1404	68		pla		DISKER PLA      ;PULL INPUT CHAR
.1405	68		pla		 PLA            ;PULL RETURN
.1406	68		pla		 PLA            ;
.1407	68		pla		 PLA            ;PULL RETURN
.1408	68		pla		 PLA            ;
.1409	4c 84 13	jmp $1384	 JMP ERROR      ;GOTO ERROR HANDLE
.140c	18		clc		SUMBYT CLC      ;CLEAR CARRY
.140d	6d 76 14	adc $1476	 ADC USER       ;ADD BYTE OF CHECK
.1410	8d 76 14	sta $1476	 STA USER       ;REPLACE BYTE
.1413	90 03		bcc $1418	 BCC EXIT       ;IF NO CARRY OK
.1415	ee 77 14	inc $1477	 INC USER+1     ;INC HIGH BYTE
.1418	60		rts		EXIT RTS        ;RETURN
.1419	a9 00		lda #$00	GETBYT LDA #$00  ;ZERO BYTE
.141b	8d 7e 14	sta $147e	 STA TEMP        ;STORE IN TEMP
.141e	20 f6 13	jsr $13f6	 JSR INPUT       ;GET CHAR INPUT
.1421	c9 20		cmp #$20	CHCKSP CMP #' '  ;IS IT A SPACE?
.1423	d0 09		bne $142e	 BNE CREBYT      ;IF NOT CREATE
.1425	20 f6 13	jsr $13f6	 JSR INPUT       ;GET CHAR INPUT
.1428	c9 20		cmp #$20	 CMP #' '        ;IS IT S SPACE?
.142a	d0 0f		bne $143b	 BNE NEXBYT      ;IF NOT GO ON
.142c	18		clc		 CLC             ;FLAG ERROR
.142d	60		rts		 RTS             ;RETURN
.142e	20 eb 13	jsr $13eb	CREBYT JSR BYTASC ;GET HIGH NIBBLE
.1431	0a		asl a		 ASL A            ;LEFT JUSTIFY
.1432	0a		asl a		 ASL A            ; ASCII CHAR
.1433	0a		asl a		 ASL A            ;  IN HIGH
.1434	0a		asl a		 ASL A            ;   NIBBLE
.1435	8d 7e 14	sta $147e	 STA TEMP         ;STORE
.1438	20 f6 13	jsr $13f6	 JSR INPUT        ;GET INPUT
.143b	20 eb 13	jsr $13eb	NEXBYT JSR BYTASC ;CREATE LOW NIB
.143e	0d 7e 14	ora $147e	 ORA TEMP         ;PUT IN PLACE
.1441	38		sec		 SEC              ;FLAG OK
.1442	60		rts		 RTS              ;RETURN
.1443	a5 fb		lda $fb		PRTADD LDA ZEROPG ;LOW ADDRESS
.1445	8d 4d 15	sta $154d	 STA SAV      ;SAVE HIGH BYTE START ADDRESS
.1448	48		pha		 PHA          ;STACK IT
.1449	a5 fc		lda $fc		 LDA ZEROPG+1 ;GET HIGH BYTE
.144b	8d 4e 15	sta $154e	 STA SAV+1    ;SAVE LOW BYTE START ADDRESS
.144e	20 52 14	jsr $1452	 JSR RIGHT    ;PRINT IT
.1451	68		pla		 PLA          ;PULL LOW BYTE
.1452	48		pha		RIGHT PHA     ;STACK BYTE
.1453	4a		lsr a		 LSR A        ;RIGHT JUSTIFY
.1454	4a		lsr a		 LSR A        ; BYTE IN LOW
.1455	4a		lsr a		 LSR A        ;  NIBBLE
.1456	4a		lsr a		 LSR A        ;
.1457	20 6a 14	jsr $146a	 JSR CHGASC   ;CONVERT BYTE
.145a	aa		tax		 TAX          ;STORE IN X
.145b	68		pla		 PLA          ;PULL BYTE
.145c	29 0f		and #$0f	 AND #$0F     ;MASK HIGH
.145e	20 6a 14	jsr $146a	 JSR CHGASC   ;CONVERT BYTE
.1461	48		pha		 PHA          ;STACK RESULT
.1462	8a		txa		 TXA          ;GET HIGH NIBBLE
.1463	20 d2 ff	jsr $ffd2	 JSR CHROUT   ;PRINT IT
.1466	68		pla		 PLA          ;GET LOW NIBBLE
.1467	4c d2 ff	jmp $ffd2	 JMP CHROUT   ;PRINT AND RETURN
.146a	18		clc		CHGASC CLC      ;CLEAR CARRY
.146b	69 f6		adc #$f6	 ADC #$F6       ;ADD OFFSET
.146d	90 02		bcc $1471	 BCC NOSIX      ;IF C=0 OK
.146f	69 06		adc #$06	 ADC #$06       ;ADD OFFSSET
.1471	69 3a		adc #$3a	NOSIX ADC #$3A  ;ADD OFFSET
.1473	60		rts		 RTS            ;RETURN
>1474	49 30				INIT  .TEXT 'I0'
>1476	aa aa				USER .WORD $AAAA   ;CHECKSUM VALUE
>1478	aa aa				OFFSET .WORD $AAAA ;LOAD OFFSET
>147a	aa				NUMBYT .BYTE $AA   ;NUMBER BYTES
>147b	aa aa				RECORD .WORD $AAAA ;RECORD NUMBER
>147d	aa				COUNT .BYTE $AA    ;COUNTER
>147e	aa				TEMP .BYTE $AA     ;TEMPOARY
>147f	aa aa aa aa aa aa		BUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA
>1485	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>148b	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>1491	aa				COUNT1 .BYTE $AA   ;COUNTER
>1492	0d				MSG1 .BYTE $0D
>1493	42 41 44 20 52 45 43 4f		.TEXT 'BAD RECORD COUN',$D4
>149b	52 44 20 43 4f 55 4e d4
>14a3	0d				MSG2 .BYTE $0D
>14a4	42 52 45 41 4b 8d		.TEXT 'BREAK',$8D
>14aa	0d				MSG3 .BYTE $0D
>14ab	45 4e 44 20 4f 46 20 4c		.TEXT 'END OF LOA',$C4
>14b3	4f 41 c4
>14b6	0d				MSG4 .BYTE $0D
>14b7	4e 4f 4e 2d 52 41 4d 20		.TEXT 'NON-RAM LOA',$C4
>14bf	4c 4f 41 c4
>14c3	0d				MSG5 .BYTE $0D
>14c4	43 48 45 43 4b 53 55 4d		.TEXT 'CHECKSUM ERRO',$D2
>14cc	20 45 52 52 4f d2
>14d2	0d				MSG6 .BYTE $0D
>14d3	46 49 4c 45 20 45 52 52		.TEXT 'FILE ERRO',$D2
>14db	4f d2
>14dd	0d 0d 0d			MSG7 .BYTE $0D,$0D,$0D
>14e0	4c 4f				.BYTE TITLE1,TITLE2
>14e2	4c 4f 41 44 2e 56 32 30		.TEXT 'LOAD.V20 V072882'
>14ea	20 56 30 37 32 38 38 32
>14f2	0d				.BYTE $0D
>14f3	28 43 29 31 39 38 32 20		.TEXT '(C)1982 BY COMMODORE'
>14fb	42 59 20 43 4f 4d 4d 4f 44 4f 52 45
>1507	42 55 53 49 4e 45 53 53		.TEXT 'BUSINESS MACHINES'
>150f	20 4d 41 43 48 49 4e 45 53
>1518	8d				.BYTE $8D
>1519	3f 8d				.BYTE '?',$8D
>151b	0d 0d				MSG8 .BYTE $0D,$0D
>151d	4f 42 4a 45 43 54 20 46		.TEXT 'OBJECT FILE NAME ?',$8D
>1525	49 4c 45 20 4e 41 4d 45 20 3f 8d
>1530	0d 0d				MSG9 .BYTE $0D,$0D
>1532	50 52 47 20 4e 41 4d 45		.TEXT 'PRG NAME ?',$8D
>153a	20 3f 8d
>153d	0d 0d				MSG10 .BYTE $0D,$0D
>153f	4f 42 4a 20 4e 4f 54 20		.TEXT 'OBJ NOT SAVED',$8D
>1547	53 41 56 45 44 8d
>154d	aa aa				SAV   .WORD $AAAA ;ADDRESS SAVE
>154f	aa aa				SA    .WORD $AAAA ;START ADDRESS
>1551	aa aa				EA    .WORD $AAAA ;END ADDRESS
>1553	00				SAFG  .BYTE $00   ;START ADDRESS FLAG
>1554	00				ECODE .BYTE $00   ;ERROR CODE

;******  Processing file: savobj.asm

=$1555					SAVOBJ =*
.1555	a2 9e		ldx #$9e	 LDX #MSG9-MSG1  ;OFFSET FOR MSG
.1557	20 d5 13	jsr $13d5	 JSR PRINT       ;PRG NAME:
.155a	20 99 15	jsr $1599	 JSR INSTNF
.155d	ad 7f 14	lda $147f	 LDA BUF
.1560	c9 0d		cmp #$0d	 CMP #$0D
.1562	d0 06		bne $156a	 BNE PFILE0
.1564	a2 ab		ldx #$ab	 LDX #MSG10-MSG1 ;OFFSET FOR MSG
.1566	20 d5 13	jsr $13d5	 JSR PRINT       ;PRINT OBJ NOT SAVED
.1569	60		rts		 RTS
.156a	a2 00		ldx #$00	PFILE0 LDX #$00
.156c	bd 82 15	lda $1582,x	PFILE1 LDA PROGM,X
.156f	99 7f 14	sta $147f,y	 STA BUF,Y
.1572	c8		iny		 INY
.1573	e8		inx		 INX
.1574	e0 04		cpx #$04	 CPX #$04
.1576	d0 f4		bne $156c	 BNE PFILE1
.1578	8c 86 15	sty $1586	 STY SAVA ; LENGTH OF FILE NAME
.157b	20 87 15	jsr $1587	 JSR ADDONE
.157e	20 a8 15	jsr $15a8	 JSR SVFILE
.1581	60		rts		 RTS
>1582	2c 50 2c 57			PROGM .TEXT ',P,W'
>1586	aa				SAVA .BYTE $AA
=$1587					ADDONE =*
.1587	18		clc		 CLC ; CLEAR CARRY
.1588	ad 51 15	lda $1551	 LDA EA
.158b	69 01		adc #$01	 ADC #$01
.158d	8d 51 15	sta $1551	 STA EA ; STORE SUM OF LSBS
.1590	ad 52 15	lda $1552	 LDA EA+1
.1593	69 00		adc #$00	 ADC #$00 ; ADD THE MSBS USING CARRY FROM
.1595	8d 52 15	sta $1552	 STA EA+1 ; THE PREVIOUS CALCULATION
.1598	60		rts		 RTS
.1599	a0 00		ldy #$00	INSTNF LDY #$00
.159b	20 cf ff	jsr $ffcf	INSTN2 JSR CHRIN
.159e	99 7f 14	sta $147f,y	 STA BUF,Y
.15a1	c8		iny		 INY
.15a2	c9 0d		cmp #$0d	 CMP #$0D
.15a4	d0 f5		bne $159b	 BNE INSTN2
.15a6	88		dey		 DEY
.15a7	60		rts		 RTS
.15a8	ad 86 15	lda $1586	SVFILE LDA SAVA ; LENGHT OF FILE NAME
.15ab	a2 7f		ldx #$7f	 LDX #<BUF
.15ad	a0 14		ldy #$14	 LDY #>BUF
.15af	20 bd ff	jsr $ffbd	 JSR SETNAM
.15b2	a9 00		lda #$00	 LDA #$00
.15b4	a2 08		ldx #$08	 LDX #$08
.15b6	a0 01		ldy #$01	 LDY #$01
.15b8	20 ba ff	jsr $ffba	 JSR SETLFS
.15bb	ad 4f 15	lda $154f	 LDA SA
.15be	85 fd		sta $fd		 STA ZEROUR   ;WAS $2B
.15c0	ad 50 15	lda $1550	 LDA SA+1
.15c3	85 fe		sta $fe		 STA ZEROUR+1 ;WAS $2C
.15c5	a9 fd		lda #$fd	 LDA #ZEROUR ; zero-page index to the pointer
.15c7	ae 51 15	ldx $1551	 LDX EA
.15ca	ac 52 15	ldy $1552	 LDY EA+1
.15cd	20 d8 ff	jsr $ffd8	 JSR SAVE
.15d0	90 05		bcc $15d7	 BCC OKSAV ; CARRY CLEAR = OK
.15d2	a2 ab		ldx #$ab	 LDX #MSG10-MSG1 ;OFFSET FOR MSG
.15d4	20 d5 13	jsr $13d5	 JSR PRINT       ;PRINT OBJ NOT SAVED
=$15d7					OKSAV =*
.15d7	a9 08		lda #$08	 LDA #$08
.15d9	20 c3 ff	jsr $ffc3	 JSR CLOSE
.15dc	60		rts		 RTS

;******  Return to file: loader.asm


;******  Return to file: loloader.asm


;******  End of listing
